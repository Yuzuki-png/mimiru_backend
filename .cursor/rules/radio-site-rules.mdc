---
description: 
globs: 
alwaysApply: true
---
✅ TypeScript 一般ルール
基本原則
コード・ドキュメントを一切つけない。

すべての変数・関数（パラメータ・戻り値）には型を明示的に定義する。

any は使用禁止。

必要な型は適宜作成する。

関数内で空行を入れない。

1ファイルにつき1エクスポートのみ許可。

命名規則
要素	記法	例
クラス名	PascalCase	UserService
変数・関数・メソッド	camelCase	fetchUsers
ブール変数	camelCase + 動詞	isLoading, canDelete
ファイル・ディレクトリ	kebab-case	user-service.ts
環境変数	UPPER_CASE	DATABASE_URL

関数
短く、単一目的（20行未満）。

動詞から始める。

早期リターンを使用し、ネストを避ける。

簡単な関数（3行以内）はアロー関数、その他は名前付き関数。

null/undefined チェックを避け、デフォルト値を使用。

RO-RO パターン を採用。

1段階の抽象レベルに留める。

データ
プリミティブ型の濫用を避け、複合型でラップ。

バリデーションは関数ではなく、クラス内で行う。

イミュータブルを徹底（readonly、as const）。

クラス
SOLID 原則を厳守。
継承よりもコンポジション。
インターフェースで契約定義。
小さく単一目的（200行未満、10メソッド未満、10プロパティ未満）。

例外
想定外のエラーのみ例外を使用。
catch は以下のみ：
期待された問題修正。
コンテキスト追加。
それ以外はグローバルハンドラー。

テスト
AAA（Arrange-Act-Assert）を徹底。

変数名：inputX, mockX, actualX, expectedX。

✅ テストルール（NestJS プロジェクト）
テスト種類	使用ツール	詳細
ユニットテスト	Jest	各 サービス、コントローラー、ユースケース、ユーティリティ関数に対して単体テスト。
E2Eテスト	Jest + Supertest	APIモジュール単位のエンドツーエンドテスト（Nest公式推奨）。


✅ NestJS 専用ルール
基本原則
モジュール単位で API をカプセル化。

メインドメイン・ルートごとに1モジュール。

各ルートに1コントローラー。

サブドメインは専用コントローラー。

models フォルダ：DTO（class-validator）、出力型。

services フォルダ：ビジネスロジック・永続化（MikroORM、Prisma、TypeORM）。

repository フォルダ：dbアクセス関連、dbからデータを取得処理。

エンティティごとに1サービス。

共通・コアモジュール
Core モジュール：

グローバルフィルター（例外）

グローバルミドルウェア（リクエスト処理）

ガード（認可）

インターセプター（リクエスト処理）

共有モジュール
Shared モジュール：

ユーティリティ、共通ビジネスロジック

Docker 構成
サービス単位でコンテナ分離：

NestJS

PostgreSQL

Prisma CLI / Migration

必要に応じて Nginx

docker-compose で構成。

環境変数は .env で管理、secrets は bind mount。

✅ アーキテクチャ
オニオンアーキテクチャ（クリーンアーキテクチャに準拠）を採用。

エンティティ層、ユースケース層、インフラ層、インターフェース層に分割。

✅ ツール・品質管理
Swagger (OpenAPI) を使用し、API ドキュメントを自動生成。

ESLint を導入し、厳格な静的解析を実施。

Prettier によるコードフォーマットを強制。

Husky を導入し、コミット前に Lint・テストを実行。

Commit メッセージは Conventional Commits 準拠。